diff -ruN mbedtls-2.16.6/include/mbedtls/config.h mbedX/include/mbedtls/config.h
--- mbedtls-2.16.6/include/mbedtls/config.h	2020-04-09 10:12:23
+++ mbedX/include/mbedtls/config.h	2023-03-31 09:02:37
@@ -86,7 +86,7 @@
  * example, if double-width division is implemented in software, disabling
  * it can reduce code size in some embedded targets.
  */
-//#define MBEDTLS_NO_UDBL_DIVISION
+#define MBEDTLS_NO_UDBL_DIVISION
 
 /**
  * \def MBEDTLS_NO_64BIT_MULTIPLICATION
@@ -1160,7 +1160,7 @@
  *
  * Uncomment this macro to disable the built-in platform entropy functions.
  */
-//#define MBEDTLS_NO_PLATFORM_ENTROPY
+#define MBEDTLS_NO_PLATFORM_ENTROPY
 
 /**
  * \def MBEDTLS_ENTROPY_FORCE_SHA256
diff -ruN mbedtls-2.16.6/library/net_sockets.c mbedX/library/net_sockets.c
--- mbedtls-2.16.6/library/net_sockets.c	2020-04-09 10:12:23
+++ mbedX/library/net_sockets.c	2023-03-31 12:25:20
@@ -34,7 +34,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__)
+    !defined(__HAIKU__) && !defined(PSP)
 #error "This module only works on Unix and Windows, see MBEDTLS_NET_C in config.h"
 #endif
 
@@ -147,6 +147,7 @@
 int mbedtls_net_connect( mbedtls_net_context *ctx, const char *host,
                          const char *port, int proto )
 {
+#if 0
     int ret;
     struct addrinfo hints, *addr_list, *cur;
 
@@ -187,6 +188,37 @@
     freeaddrinfo( addr_list );
 
     return( ret );
+#endif
+    /* Legacy IPv4-only version */
+
+    int ret;
+    struct sockaddr_in server_addr;
+    struct hostent *server_host;
+
+    if( ( ret = net_prepare() ) != 0 )
+        return( ret );
+
+    if( ( server_host = gethostbyname( host ) ) == NULL )
+        return( MBEDTLS_ERR_NET_UNKNOWN_HOST );
+
+    if( ( ctx->fd = (int) socket( AF_INET, SOCK_STREAM, IPPROTO_IP ) ) < 0 )
+        return( MBEDTLS_ERR_NET_SOCKET_FAILED );
+
+    memcpy( (void *) &server_addr.sin_addr,
+            (void *) server_host->h_addr,
+                     server_host->h_length );
+
+    server_addr.sin_family = AF_INET;
+    server_addr.sin_port   = htons( atoi(port) );
+
+    if( connect( ctx->fd, (struct sockaddr *) &server_addr,
+                 sizeof( server_addr ) ) < 0 )
+    {
+        close( ctx->fd );
+        return( MBEDTLS_ERR_NET_CONNECT_FAILED );
+    }
+
+    return( 0 );
 }
 
 /*
@@ -194,6 +226,7 @@
  */
 int mbedtls_net_bind( mbedtls_net_context *ctx, const char *bind_ip, const char *port, int proto )
 {
+#if 0
     int n, ret;
     struct addrinfo hints, *addr_list, *cur;
 
@@ -258,7 +291,57 @@
     freeaddrinfo( addr_list );
 
     return( ret );
+#endif
+    /* Legacy IPv4-only version */
 
+    int ret, n, c[4];
+    struct sockaddr_in server_addr;
+
+    if( ( ret = net_prepare() ) != 0 )
+        return( ret );
+
+    if( ( ctx->fd = (int) socket( AF_INET, SOCK_STREAM, IPPROTO_IP ) ) < 0 )
+        return( MBEDTLS_ERR_NET_SOCKET_FAILED );
+
+    n = 1;
+    setsockopt( ctx->fd, SOL_SOCKET, SO_REUSEADDR,
+                (const char *) &n, sizeof( n ) );
+
+    server_addr.sin_addr.s_addr = htonl( INADDR_ANY );
+    server_addr.sin_family      = AF_INET;
+    server_addr.sin_port        = htons( atoi(port) );
+
+    if( bind_ip != NULL )
+    {
+        memset( c, 0, sizeof( c ) );
+        sscanf( bind_ip, "%d.%d.%d.%d", &c[0], &c[1], &c[2], &c[3] );
+
+        for( n = 0; n < 4; n++ )
+            if( c[n] < 0 || c[n] > 255 )
+                break;
+
+        if( n == 4 )
+            server_addr.sin_addr.s_addr = htonl(
+                ( (uint32_t) c[0] << 24 ) |
+                ( (uint32_t) c[1] << 16 ) |
+                ( (uint32_t) c[2] <<  8 ) |
+                ( (uint32_t) c[3]       ) );
+    }
+
+    if( bind( ctx->fd, (struct sockaddr *) &server_addr,
+              sizeof( server_addr ) ) < 0 )
+    {
+        close( ctx->fd );
+        return( MBEDTLS_ERR_NET_BIND_FAILED );
+    }
+
+    if( listen( ctx->fd, MBEDTLS_NET_LISTEN_BACKLOG ) != 0 )
+    {
+        close( ctx->fd );
+        return( MBEDTLS_ERR_NET_LISTEN_FAILED );
+    }
+
+    return( 0 );
 }
 
 #if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
@@ -409,6 +492,7 @@
 
             memcpy( client_ip, &addr4->sin_addr.s_addr, *ip_len );
         }
+#if 0
         else
         {
             struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *) &client_addr;
@@ -419,6 +503,7 @@
 
             memcpy( client_ip, &addr6->sin6_addr.s6_addr, *ip_len);
         }
+#endif
     }
 
     return( 0 );
diff -ruN mbedtls-2.16.6/library/timing.c mbedX/library/timing.c
--- mbedtls-2.16.6/library/timing.c	2020-04-09 10:12:23
+++ mbedX/library/timing.c	2023-03-31 09:01:28
@@ -40,7 +40,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__)
+    !defined(__HAIKU__) && !defined(PSP)
 #error "This module only works on Unix and Windows, see MBEDTLS_TIMING_C in config.h"
 #endif
 
@@ -323,7 +323,7 @@
 {
     mbedtls_timing_alarmed = 0;
     signal( SIGALRM, sighandler );
-    alarm( seconds );
+//    alarm( seconds );
     if( seconds == 0 )
     {
         /* alarm(0) cancelled any previous pending alarm, but the
